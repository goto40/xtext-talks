/*
 * generated by Xtext 2.12.0
 */
package kurs.xtext.dataflow.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import kurs.xtext.dataflow.dataFlowDsl.KComponent
import kurs.xtext.dataflow.dataFlowDsl.Model

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DataFlowDslGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, 
			IGeneratorContext context) {
		// -------------------------------------------
		// Option 1:
		var txt = ""
		for (obj: resource.allContents.toIterable) {
			if (obj instanceof KComponent) { // inside this "if" obj is a KComponent
				if (txt.length>0) txt = txt + ", "
				txt = txt + obj.name;
			}
		}
		fsa.generateFile('Components1.txt', 'Component declarations: ' + txt);
		
		// -------------------------------------------
		// Option 2:
		fsa.generateFile('Components2.txt', 'Component declarations: ' + 
			resource.allContents
				.filter[ obj | obj instanceof KComponent]
				.map[ obj | return (obj as KComponent).name ]
				.join(', '))
				
		// -------------------------------------------
		// Option 3:
		fsa.generateFile('Components3.txt', 'Component declarations: ' + 
			resource.allContents.filter(KComponent).map[name].join(', '))
			
		// -------------------------------------------
		// Option 4:
		val model = resource.contents.get(0) as Model
		fsa.generateFile('Components4.txt', '''
		The Components of the model are:
		«FOR p: model.packages»
			Package «p.name»
			«FOR c: p.components»
				KComponent «c.name»
				«FOR port: c.ports SEPARATOR ", "» 
				- with port «port.name»
				«ENDFOR»
			«ENDFOR»
		«ENDFOR»
		''');
	}
}
