/*
 * generated by Xtext 2.12.0
 */
package kurs.xtext.dataflow.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import kurs.xtext.dataflow.dataFlowDsl.DataFlowDslPackage
import kurs.xtext.dataflow.dataFlowDsl.KConnection
import kurs.xtext.dataflow.dataFlowDsl.KPortOut
import kurs.xtext.dataflow.dataFlowDsl.KPortIn
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DataFlowDslScopeProvider extends AbstractDataFlowDslScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (reference == DataFlowDslPackage.Literals.KCONNECTION__SRC_PORT) {
			val kconn = context as KConnection;
			val ports = kconn.srcInstance.type.ports.filter(KPortOut)
			return Scopes.scopeFor(ports);
		} else if (reference == DataFlowDslPackage.Literals.KCONNECTION__DST_PORT) {
			val kconn = context as KConnection;
			val ports = kconn.dstInstance.type.ports.filter(KPortIn)
			return Scopes.scopeFor(ports);
		}
		super.getScope(context, reference)
	}

}
